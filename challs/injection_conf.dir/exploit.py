import os
import subprocess


def run_cmd(cmd_list):
	child = subprocess.Popen(cmd_list, stdout=subprocess.PIPE)
	streamdata = child.communicate()[0]
	ret = child.returncode
	return streamdata.decode(), ret


# return false if the code is not exploitable anymore
def exploit(binary, randomize):
	file_path = "/srv/writable/inject_conf_" + randomize
	_, _ = run_cmd([binary, "/srv/writable/inject_conf_whatever;touch " + file_path])
	if os.path.isfile(file_path):
		print("A character which is used to separate bash command is still usable and effective.")
		return True
	_, _ = run_cmd([binary, "/srv/writable/inject_conf_whatever\ntouch " + file_path])
	if os.path.isfile(file_path):
		print("A character which is used to separate bash command is still usable and effective.")
		return True
	_, _ = run_cmd([binary, "/srv/writable/inject_conf_whatever && touch " + file_path])
	if os.path.isfile(file_path):
		print("A character which is used to separate bash command is still usable and effective.")
		return True
	_, _ = run_cmd([binary, "/srv/writable/inject_conf_whatever & touch " + file_path])
	if os.path.isfile(file_path):
		print("A character which is used to separate bash command is still usable and effective.")
		return True
	_, _ = run_cmd([binary, "/srv/writable/inject_conf_whatever || touch " + file_path])
	if os.path.isfile(file_path):
		print("A character which is used to separate bash command is still usable and effective.")
		return True
	_, _ = run_cmd([binary, "/srv/writable/inject_conf_whatever | touch " + file_path])
	if os.path.isfile(file_path):
		print("A character which is used to separate bash command is still usable and effective.")
		return True
	return False
